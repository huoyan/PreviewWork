(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[24],{

/***/ "./src/assets/images/car/car.png":
/*!***************************************!*\
  !*** ./src/assets/images/car/car.png ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"static/img/car.5c5fe07d.png\";\n\n//# sourceURL=webpack:///./src/assets/images/car/car.png?");

/***/ }),

/***/ "./src/assets/js/downloadManager.js":
/*!******************************************!*\
  !*** ./src/assets/js/downloadManager.js ***!
  \******************************************/
/*! exports provided: newDownloadManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"newDownloadManager\", function() { return newDownloadManager; });\n/* harmony import */ var core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.json.stringify.js */ \"./node_modules/core-js/modules/es.json.stringify.js\");\n/* harmony import */ var core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.find.js */ \"./node_modules/core-js/modules/es.array.find.js\");\n/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.splice.js */ \"./node_modules/core-js/modules/es.array.splice.js\");\n/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var underscore__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! underscore */ \"./node_modules/underscore/modules/index-all.js\");\n\n\n\n\n\n/* eslint-disable */\n\n/* 长安源码 */\n\nvar newDownloadManager = function newDownloadManager() {\n  var DownloadManager = function DownloadManager() {\n    var me = this;\n    me.downloadQueue = [];\n    me.completeQueue = [];\n    me.reloadQueue = [];\n    loadState(me);\n    me.successCount = 0;\n    me.errorCount = 0;\n  };\n\n  var loadState = function loadState(me) {\n    var state = null;\n\n    try {\n      var userName = window.localStorage['username'];\n\n      if (window.localStorage[userName + '_ichangan.download-manager']) {\n        state = JSON.parse(window.localStorage[userName + '_ichangan.download-manager']);\n      }\n    } finally {}\n\n    if (!state || state == \"null\") {\n      me.completeQueue = [];\n      me.reloadQueue = [];\n      return;\n    }\n\n    me.completeQueue = state.completeQueue;\n    me.reloadQueue = state.reloadQueue;\n    if (!window.cordova) return;\n    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem; //删除下载失败的文件\n\n    underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].each(state.downloadQueue, function (task) {\n      me.removeFile(task);\n    });\n  };\n\n  underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].extend(DownloadManager.prototype, {\n    loadState: function loadState() {\n      var me = this;\n      var state = null;\n\n      try {\n        var userName = window.localStorage['username'];\n\n        if (window.localStorage[userName + '_ichangan.download-manager']) {\n          state = JSON.parse(window.localStorage[userName + '_ichangan.download-manager']);\n        }\n      } finally {}\n\n      if (!state || state == \"null\") {\n        this.completeQueue = [];\n        this.reloadQueue = [];\n        return;\n      }\n\n      this.completeQueue = state.completeQueue;\n      this.reloadQueue = state.reloadQueue;\n      if (!window.cordova) return;\n      window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem; //删除下载失败的文件\n\n      underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].each(state.downloadQueue, function (task) {\n        me.removeFile(task);\n      });\n    },\n    saveState: function saveState() {\n      //保存状态\n      var userName = window.localStorage['username'];\n      var state = {\n        downloadQueue: this.downloadQueue,\n        completeQueue: this.completeQueue,\n        reloadQueue: this.reloadQueue\n      };\n      window.localStorage[userName + '_ichangan.download-manager'] = JSON.stringify(state);\n    },\n    //任务下载\n    onDownload: function onDownload(id, url, filename, target, onProgress, success, fail) {\n      //ID 下载路径 文件名 存储目标 进度方法 成功方法 失败方法\n      var me = this;\n      var downloadUrl = url; //下载路径\n\n      var idUrl = id; //ID\n\n      if (me.findDownloadTask(id)) {\n        //如果任务已经在下载中，就return\n        return;\n      } else if (me.findReloadTask(id)) {\n        me.removeTask(id);\n        me.saveState();\n      }\n\n      var task = {\n        url: idUrl,\n        downloadUrl: downloadUrl,\n        filename: filename,\n        target: target\n      };\n      var uri = encodeURI(downloadUrl);\n      task.ft = new FileTransfer();\n\n      task.ft.onprogress = function (progressEvent) {\n        if (progressEvent.lengthComputable) {\n          if (onProgress) {\n            onProgress(idUrl, progressEvent.loaded / progressEvent.total);\n          } //me.findDownloadTask(idUrl).downloadProgress = (progressEvent.loaded / progressEvent.total);\n          //me.trigger(\"downloadProgress\", me.findDownloadTask(idUrl)); //trigger事件\n\n        }\n      };\n\n      me.downloadQueue.push(task); //存入已经正在下载的队列中\n\n      me.saveState();\n      task.ft.download(uri, encodeURI(target), function (entry) {\n        //删除cordova.file-transfer对象\n        delete task.ft;\n        me.completeQueue.push(task); //存入已经下载完成的队列中\n\n        me.removeTask(task.url); //移出正在下载的队列\n\n        me.saveState(); //保存状态\n\n        if (success) {\n          success(task.url, task.filename, entry);\n        } //me.trigger(\"downloadSuccess\", task);\n\n      }, function (error) {\n        me.removeTask(task.url); //移出正在下载的队列\n\n        if (!me.notAddToReloadQueue && !me.findReloadTask(task.url)) {\n          me.reloadQueue.push(task); //添加到重新下载队列\n        }\n\n        me.saveState();\n\n        if (fail) {\n          fail(task.url, task.filename);\n        } //me.trigger(\"downloadError\", task, me.notAddToReloadQueue);\n\n\n        me.notAddToReloadQueue = false; //将此标志置为false\n      }, false, {\n        headers: {\n          /* \"Authorization\": \"Basic k==\"*/\n        }\n      });\n    },\n    abort: function abort(idUrl) {\n      //停止任务\n      this.notAddToReloadQueue = true; //别添加到重新下载的队列\n\n      var task = this.findDownloadTask(idUrl);\n\n      if (task && task.ft) {\n        task.ft.abort();\n      }\n    },\n    findCompleteTask: function findCompleteTask(url) {\n      //通过url找到下载完成的任务\n      return underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].find(this.completeQueue, function (task) {\n        return task.url == url;\n      });\n    },\n    findDownloadTask: function findDownloadTask(url) {\n      //通过url找到下载任务\n      return underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].find(this.downloadQueue, function (task) {\n        return task.url == url;\n      });\n    },\n    findReloadTask: function findReloadTask(url) {\n      //通过url找到重新下载任务\n      return underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].find(this.reloadQueue, function (task) {\n        return task.url == url;\n      });\n    },\n    removeTask: function removeTask(url) {\n      //通过url删除下载任务\n      var me = this;\n      var downloadIndex = me.downloadQueue.indexOf(me.findDownloadTask(url)); //是否存在下载队列\n\n      var completeIndex = me.completeQueue.indexOf(me.findCompleteTask(url)); //是否存在完成队列\n\n      var reloadIndex = me.reloadQueue.indexOf(me.findReloadTask(url)); //是否存在重新下载队列\n\n      if (downloadIndex > -1) {\n        me.downloadQueue.splice(downloadIndex, 1);\n      } else if (completeIndex > -1) {\n        me.completeQueue.splice(completeIndex, 1);\n      } else if (reloadIndex > -1) {\n        me.reloadQueue.splice(reloadIndex, 1);\n      }\n    },\n    deleteFile: function deleteFile(url, urlLength) {\n      //删除任务和文件\n      var me = this;\n\n      if (me.findDownloadTask(url)) {\n        me.removeDownloadingTask(url, urlLength); //删除正在下载的任务和文件\n      } else if (me.findCompleteTask(url)) {\n        me.removeFile(me.findCompleteTask(url), urlLength); //如果已经下载完成就删除本地文件\n      } else if (me.findReloadTask(url)) {\n        //移出重新下载的任务\n        me.removeTask(url);\n        me.saveState();\n        me.successCount = me.successCount + 1;\n        me.triggerReload(urlLength);\n      } else {\n        me.successCount = me.successCount + 1;\n        me.triggerReload(urlLength);\n      }\n    },\n    removeDownloadingTask: function removeDownloadingTask(idUrl, urlLength) {\n      //删除正在下载的任务\n      var me = this; // me.notAddToReloadQueue = true;\t\t//别添加到重新下载的队列\n\n      me.abort(idUrl);\n      setTimeout(function () {\n        //延迟更改状态的时机，\n        me.removeTask(idUrl);\n        me.saveState(); //me.trigger(\"removeSuccessCount\", urlLength);\n      }, 0);\n    },\n    getTargetCount: function getTargetCount(target) {\n      var targetCount = 0;\n\n      for (var storeKey in window.localStorage) {\n        //遍历localStorage\n        if (storeKey.indexOf(\"_ichangan.download-manager\") > -1) {\n          //获取所有用户的下载列表\n          var otherDownloadManager = window.localStorage.getItem(storeKey);\n\n          if (otherDownloadManager && otherDownloadManager !== \"\" && otherDownloadManager !== \"null\") {\n            //判断otherDownloadManager不为空\n            var otherDownloadManagerOb = JSON.parse(otherDownloadManager);\n\n            if (otherDownloadManagerOb.completeQueue && otherDownloadManagerOb.completeQueue.length > 0) {\n              //获取已经下载完成的文件路径\n              console.log(\"用户:\" + storeKey);\n\n              underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].each(otherDownloadManagerOb.completeQueue, function (completeItem) {\n                if (completeItem.target && completeItem.target.indexOf(target) > -1) {\n                  //如果文件路径相同\n                  targetCount = targetCount + 1;\n                  console.log(\"target的数目:\" + targetCount);\n                }\n              });\n            }\n          }\n        }\n      }\n\n      return targetCount;\n    },\n    removeFile: function removeFile(task, urlLength) {\n      //删除本地文件\n      var me = this;\n      if (!window.cordova) return;\n      setTimeout(function () {\n        window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fs) {\n          // LocalFileSystem.PERSISTENT\n\n          /*var fileName = task.filename;\n           var fileType = fileName.substring(fileName.lastIndexOf(\".\"));\n           var fileShortName = fileName.substring(0,fileName.lastIndexOf(\".\"));\n           fileName = fileShortName + task.url + fileType;*/\n          // var filePath = device.platform == 'iOS' ? fileName : \"cn.com.changan.ichangan/\" + fileName;\n          if (device.platform == \"iOS\") {\n            var target = task.target.substring(fs.root.nativeURL.length);\n          } else {\n            var filePathIndex = task.target.indexOf(\"cn.com.changan.cvim/\");\n            var target = task.target.substring(filePathIndex);\n          }\n\n          console.log(target);\n          fs.root.getFile(target, {\n            create: false\n          }, function (fileEntry) {\n            var targetCount = me.getTargetCount(target);\n\n            if (targetCount > 1) {\n              me.removeTask(task.url);\n              me.saveState(); //更新本地存储\n              //me.trigger(\"removeSuccess\", task);\n              //me.trigger(\"removeSuccessCount\", urlLength);\n            } else {\n              fileEntry.remove(function () {\n                me.removeTask(task.url);\n                me.saveState(); //更新本地存储\n                //me.trigger(\"removeSuccess\", task);\n                //me.trigger(\"removeSuccessCount\", urlLength);\n              }, function (error) {\n                console.error('remove err: %s', error); //me.trigger(\"removeError\", task);\n                //me.trigger(\"removeErrorCount\", urlLength);\n              });\n            }\n          }, function (error) {\n            me.removeTask(task.url);\n            me.saveState(); //更新本地存储\n\n            console.error('getFile err: %s', error); //me.trigger(\"getError\", task);\n            //me.trigger(\"getErrorCount\", urlLength);\n          });\n        }, function (error) {\n          console.error(error);\n        });\n      }, 0);\n      /*window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fs) {\n        // LocalFileSystem.PERSISTENT\n        /!*var fileName = task.filename;\n         var fileType = fileName.substring(fileName.lastIndexOf(\".\"));\n         var fileShortName = fileName.substring(0,fileName.lastIndexOf(\".\"));\n         fileName = fileShortName + task.url + fileType;*!/\n         // var filePath = device.platform == 'iOS' ? fileName : \"cn.com.changan.ichangan/\" + fileName;\n        if (device.platform == \"iOS\") {\n          var target = task.target.substring(fs.root.nativeURL.length);\n        } else {\n          var filePathIndex = task.target.indexOf(\"cn.com.changan.cvim/\");\n          var target = task.target.substring(filePathIndex);\n        }\n        console.log(target);\n        fs.root.getFile(target, {\n          create: false\n        }, function(fileEntry) {\n          var targetCount = me.getTargetCount(target);\n          if(targetCount > 1) {\n            me.removeTask(task.url);\n            me.saveState(); //更新本地存储\n            //me.trigger(\"removeSuccess\", task);\n            //me.trigger(\"removeSuccessCount\", urlLength);\n          } else {\n            fileEntry.remove(function() {\n              me.removeTask(task.url);\n              me.saveState(); //更新本地存储\n              //me.trigger(\"removeSuccess\", task);\n              //me.trigger(\"removeSuccessCount\", urlLength);\n            }, function(error) {\n              console.error('remove err: %s', error);\n              //me.trigger(\"removeError\", task);\n              //me.trigger(\"removeErrorCount\", urlLength);\n            });\n          }\n         }, function(error) {\n          me.removeTask(task.url);\n          me.saveState(); //更新本地存储\n          console.error('getFile err: %s', error);\n          //me.trigger(\"getError\", task);\n          //me.trigger(\"getErrorCount\", urlLength);\n        });\n      }, function(error) {\n        console.error(error)\n      });*/\n    },\n    removeFileBatch: function removeFileBatch(urlArr) {\n      //批量删除文件和任务\n      var me = this;\n      var urlLength = urlArr.length;\n\n      underscore__WEBPACK_IMPORTED_MODULE_4__[\"default\"].each(urlArr, function (url) {\n        if (!window.cordova) return;\n        me.deleteFile(url, urlLength); //删除任务和文件\n      });\n    },\n    onRemoveSuccessCount: function onRemoveSuccessCount(urlLength) {\n      //计算删除文件成功的数目\n      this.successCount = this.successCount + 1;\n      this.triggerReload(urlLength);\n    },\n    onRemoveErrorCount: function onRemoveErrorCount(urlLength) {\n      //计算删除文件失败的数目\n      this.errorCount = this.errorCount + 1;\n      this.triggerReload(urlLength);\n    },\n    onGetErrorCount: function onGetErrorCount(urlLength) {\n      //计算删除文件失败的数目\n      this.successCount = this.successCount + 1;\n      this.triggerReload(urlLength);\n    },\n    triggerReload: function triggerReload(length) {\n      //发射重新加载数据\n      var me = this;\n\n      if (me.successCount + me.errorCount == length) {\n        //全部删除完成就发射重新加载数据事件\n        //me.trigger(\"reloadData\", me.successCount);\n        me.successCount = 0;\n        me.errorCount = 0;\n      }\n    },\n    openFile: function openFile(completeTask) {\n      var me = this;\n      if (!window.cordova) return;\n      /*var fileName = completeTask.filename;\n       var fileType = fileName.substring(fileName.lastIndexOf(\".\"));\n       var fileShortName = fileName.substring(0,fileName.lastIndexOf(\".\"));\n       fileName = fileShortName + completeTask.url + fileType;*/\n\n      window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fs) {\n        // var fileURL = device.platform == \"iOS\" ? fileName : \"cn.com.changan.ichangan/\" + fileName;\n        if (device.platform == \"iOS\") {\n          var target = completeTask.target.substring(fs.root.nativeURL.length);\n        } else {\n          var filePathIndex = completeTask.target.indexOf(\"cn.com.changan.cvim/\");\n          var target = completeTask.target.substring(filePathIndex);\n        }\n\n        console.log(target);\n        fs.root.getFile(target, {\n          create: false\n        }, function (fileEntry) {//me.trigger(\"fileExist\", completeTask); //发射事件说明文件存在，可以打开文件\n          // var ref = window.open(target, targetType, \"location=yes\");\n        }, function (error) {//me.trigger(\"fileNoExist\", completeTask); //发射事件说明文件不存在\n        });\n      }, function (error) {//me.trigger(\"openError\"); //发射事件说明文件打开失败\n      });\n    } //openFile\n\n  });\n\n  return new DownloadManager();\n};\n\n//# sourceURL=webpack:///./src/assets/js/downloadManager.js?");

/***/ })

}]);